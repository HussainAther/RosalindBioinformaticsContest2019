from numpy import zeros
import pylev # Levenstein distance package

"""
You are given a linear genome. Find a string 𝐸 that appears in the genome on its forward strand at
least 𝑛 times without overlaps such that each occurrence has no more than 𝑑 errors.
"""

#def error_cigar(a, b, s): # Return the error score and cigar string between two strings
#    score = 0
#    for i in range(s, len(b)):
#        if a[i] != b[i]:


def edit_alignment(v, w, d):
    '''Returns the string candidates and edit alignment of string v and substring w with maximum error score d.'''
    results = []
    # Initialize the matrices.
    S = zeros((len(v)+1, len(w)+1), dtype=int)
    backtrack = zeros((len(v)+1, len(w)+1), dtype=int)

    for i in range(1, len(v)+1):
        S[i][0] = i
    for j in range(1, len(w)+1):
        S[0][j] = j

    candidates = []

    # Fill in the Score and Backtrack matrices.
    for i in range(1, len(v)+1):
        for j in range(1, len(w)+1):
            scores = [S[i-1][j-1] + (v[i-1] != w[j-1]), S[i-1][j]+1, S[i][j-1]+1]
            S[i][j] = min(scores)
            backtrack[i][j] = scores.index(S[i][j])

    # Quick lambda function to insert indels.
    insert_indel = lambda word, i: word[:i] + '-' + word[i:]

    # Initialize the aligned strings as the input strings.
    v_aligned, w_aligned = v, w

    candidate_starts = []

    # Initialize the values of i,j and get the minimum score.
    i,j = len(v), len(w)
    for a in range(1, i+1):
        for b in range(1, j+1):
            candidate_starts.append(S[a][b])

    min_score = S[i][j]

    # Backtrack to the edge of the matrix starting bottom right.
    while i*j != 0:
        if backtrack[i][j] == 1:
            i -= 1
            w_aligned = insert_indel(w_aligned, j)
        elif backtrack[i][j] == 2:
            j -= 1
            v_aligned = insert_indel(v_aligned, i)
        else:
            i -= 1
            j -= 1

    # Prepend the necessary preceeding indels to get to (0,0).
    for repeat in range(i):
        w_aligned = insert_indel(w_aligned, 0)
    for repeat in range(j):
        v_aligned = insert_indel(v_aligned, 0)

    return str(min_score), v_aligned, w_aligned

def chunkstring(string, length):
    return list(string[0+i:length+i] for i in range(0, len(string), length))

def occurrences(string, sub):
    count = start = 0
    while True:
        start = string.find(sub, start) + 1
        if start > 0:
            count+=1
        else:
            return count

# Read the input of n, l, d, and the string
count = 0
with open("/Users/syedather/Downloads/qual3input.txt", "r") as file:
    for line in file:
        if count == 0:
            n = int(line.split(" ")[0])
            l = int(line.split(" ")[1])
            d = int(line.split(" ")[2])
        if count == 1:
            s = str(line.replace("\n",""))
        count += 1

print(edit_alignment("CTGAGGCGCTGAGGCGGCCGTGGCGGCGGCGGCGGCGGCGGCGGCAGCGGCGGCCAAGCGGCCAGGTTGGCGGCCGGGGCTCCGGGCCGCGCGAGGCCACGGCCACGCCGCGCCGCTGCGCACAACCAACGAGGCAGAGCGCCGCCCGGCGCGAGACTGCGGCCGAAGCGTGGGGCGCGCGTGCGGAGGACCAGGCGCGGCGCGGCTGCGGCTGAGAGTGGAGCCTTTCAGGCTGGCATGGAGAGCTTAAGGGGCAACTGAAGGAGACACACTGGCCAAGCGCGGAGTTCTGCTTACTTCAGTCCTGCTGAGATACTCTCTCAGTCCGCTCGCACCGAAGGAAGCTGCCTTGGGATCAGAGCAGACATAAAGCTAGAAAAATTTCAAGACAGAAACAGTCTCCGCCAGTCAAGAAACCCTCAAAAGTATTTTGCCATGGATATAGAAGATGAAGAAAACATGAGTTCCAGCAGCACTGATGTGAAGGAAAACCGCAATCTGGACAACGTGTCCCCCAAGGATGGCAGCACACCTGGGCCTGGCGAGGGCTCTCAGCTCTCCAATGGGGGTGGTGGTGGCCCCGGCAGAAAGCGGCCCCTGGAGGAGGGCAGCAATGGCCACTCCAAGTACCGCCTGAAGAAAAGGAGGAAAACACCAGGGCCCGTCCTCCCCAAGAACGCCCTGATGCAGCTGAATGAGATCAAGCCTGGTTTGCAGTACACACTCCTGTCCCAGACTGGGCCCGTGCACGCGCCTTTGTTTGTCATGTCTGTGGAGGTGAATGGCCAGGTTTTTGAGGGCTCTGGTCCCACAAAGAAAAAGGCAAAACTCCATGCTGCTGAGAAGGCCTTGAGGTCTTTCGTTCAGTTTCCTAATGCCTCTGAGGCCCACCTGGCCATGGGGAGGACCCTGTCTGTCAACACGGACTTCACATCTGACCAGGCCGACTTCCCTGACACGCTCTTCAATGGTTTTGAAACTCCTGACAAGGCGGAGCCTCCCTTTTACGTGGGCTCCAATGGGGATGACTCCTTCAGTTCCAGCGGGGACCTCAGCTTGTCTGCTTCCCCGGTGCCTGCCAGCCTAGCCCAGCCTCCTCTCCCTGTCTTACCACCATTCCCACCCCCGAGTGGGAAGAATCCCGTGATGATCTTGAACGAACTGCGCCCAGGACTCAAGTATGACTTCCTCTCCGAGAGCGGGGAGAGCCATGCCAAGAGCTTCGTCATGTCTGTGGTCGTGGATGGTCAGTTCTTTGAAGGCTCGGGGAGAAACAAGAAGCTTGCCAAGGCCCGGGCTGCGCAGTCTGCCCTGGCCGCCATTTTTAACTTGCACTTGGATCAGACGCCATCTCGCCAGCCTATTCCCAGTGAGGGTCTTCAGCTGCATTTACCGCAGGTTTTAGCTGACGCTGTCTCACGCCTGGTCCTGGGTAAGTTTGGTGACCTGACCGACAACTTCTCCTCCCCTCACGCTCGCAGAAAAGTGCTGGCTGGAGTCGTCATGACAACAGGCACAGATGTTAAAGATGCCAAGGTGATAAGTGTTTCTACAGGAACAAAATGTATTAATGGTGAATACATGAGTGATCGTGGCCTTGCATTAAATGACTGCCATGCAGAAATAATATCTCGGAGATCCTTGCTCAGATTTCTTTATACACAACTTGAGCTTTACTTAAATAACAAAGATGATCAAAAAAGATCCATCTTTCAGAAATCAGAGCGAGGGGGGTTTAGGCTGAAGGAGAATGTCCAGTTTCATCTGTACATCAGCACCTCTCCCTGTGGAGATGCCAGAATCTTCTCACCACATGAGCCAATCCTGGAAGGGTCTCGCTCTTACACCCAGGCTGGAGTGCAGTGGTGCAATCATGGCTCACTGCAGCCTCGACCTCCTGGGCTCTTAAGCGATCCTTCCACCTCAACCTTCCAAGGAGCTGGGACTACAGAACCAGCAGATAGACACCCAAATCGTAAAGCAAGAGGACAGCTACGGACCAAAATAGAGTCTGGTGAGGGGACGATTCCAGTGCGCTCCAATGCGAGCATCCAAACGTGGGACGGGGTGCTGCAAGGGGAGCGGCTGCTCACCATGTCCTGCAGTGACAAGATTGCACGCTGGAACGTGGTGGGCATCCAGGGATCCCTGCTCAGCATTTTCGTGGAGCCCATTTACTTCTCGAGCATCATCCTGGGCAGCCTTTACCACGGGGACCACCTTTCCAGGGCCATGTACCAGCGGATCTCCAACATAGAGGACCTGCCACCTCTCTACACCCTCAACAAGCCTTTGCTCAGTGGCATCAGCAATGCAGAAGCACGGCAGCCAGGGAAGGCCCCCAACTTCAGTGTCAACTGGACGGTAGGCGACTCCGCTATTGAGGTCATCAACGCCACGACTGGGAAGGATGAGCTGGGCCGCGCGTCCCGCCTGTGTAAGCACGCGTTGTACTGTCGCTGGATGCGTGTGCACGGCAAGGTTCCCTCCCACTTACTACGCTCCAAGATTACCAAGCCCAACGTGTACCATGAGTCCAAGCTGGCGGCAAAGGAGTACCAGGCCGCCAAGGCGCGTCTGTTCACAGCCTTCATCAAGGCGGGGCTGGGGGCCTGGGTGGAGAAGCCCACCGAGCAGGACCAGTTCTCACTCACGCCCTGACCCGGGCAGACATGATGGGGGGTGCAGGGGGCTGTGGGCATCCAGCGTCATCCTCCAGAACCTCACATCTGAACTGGGGGCAGGTGCATACCTTGGGGAGGGAGTAGGGGGACACGGGGGACCACCAGGTGTCCACGGTTGTCCCCAGCATCTCACATCAGACCTGGGGCAGGTGCGCAGTGTGGGGAGGGGATGGGGTGCGTCAGGGCCCAGCATCGCCGCCTGGCATCTCTCTGCCGCAGCATTTCCCCTTCTGAACCGTCCAGTGACTGCTTTCAATCTCGGTTTACGTTTAGAAATTGAGTTCTACTGAGTAGGGCTTCCTTAAGTTTAGGAAAATAGAAATTACTTTGTGTGAAATTCTTGAATAAATAATTTATTCAGAGCTAGGAATGTGGTTTATAAAATAGGAAGTAATTGTGTCAGGTCACTTTTATGCCACATTATTTTAATTGCAAAAAAGCATCTATATATGGAGGAGGGTGGGAAAATAGAGGTAGGAAATAGTAGCCTAAAGGAAATCGCCACACGTCTGTCTAAACTTAGGTCTCTTTTCTCCGTAGGTACCTCCCTGGGTAGTTCCACACACTAGGTTGTAACAGTCTCTCCCTGAGGAGCAGACTCCCAGCATGGTGTAGCGTGGCCCTGTCATGCACATGGGGTCCCGCAGCAGTGACTGTGTGTCCTGCAGAGGCGTGACCCAGGCCCCTGTAGCCCTCAGCCTCCTCTAGAAGCTTCTGTACTCCTTGTAGGATCAGATCATGGAAAACTTTTCTCAGTTTACTTCTAAGTAATCACAGATAATACATGGCCAGTAATCCCAGGCTGGCCATTCATTCAGGTTTTTTAAAGGATATTTAACTTTTATGGACTAGAAGGAATCACGAGGGCTACTGCACAATACATGGCCTAAGTTCCCTCTGTTCCTTCCTCTGAATCGAATGGATGTGGGTGACCGCCCGAAGGCCTTCACAGGATGGAAGTAGAATGATTTCAGTAGATACTCATTCTTGGAAAATGCCATAGTTTTAAATTATTGTTTCCAGCTTTATCAAAGACATGTTTGAAAAATAAAAAGCATCCAAGTGAGAGCTGGTGAGACCACGTGCTGCTGGCGTAGTGTAGGCCAGACATTGACAGTCCTGACGGGAGCTCAGGGCTGCCCAGCGCCCAGCGTGCACGGGACGGCCCCACGACAGAGGGAGTCAGCCCGGGAGGTCAGGAGCGCGGCGGGCGAGGGCCCTGTGTGGACCACCTCCACCAAGCTCAGAGATTTGCACCAGGTGCCTTGTTGCCTCCGCTCAGGATGAAAGAGGAGCTGAGAGAAGTGCTCTGCCTGCCAGTGCAGTGCCCAGCTCCAAGGCTCTAGAGGGTGTTCAGGTGGGTCTCCTGGGGCCATGGGGAGAGATTGGTGCAGACCTTACCCCACAGCATACACCTGCCACAGCGAAATCCAGGGTGTTGGCACCTGTGTGTCCGTGATGAGCCTAGGAAACCAGAGCAGGGGCAGAGGGGCGTCATCCTCCCACCGGACGCTGGGAGCTCAGACCCCAAAACTGAAACACCGTGGCTTCGGCGGGGGGTGTGCCTCCTGATGTCAGGAGCCCCATCCACGTGTGTCCACACAGATCTCGTCGCAGCACGGCAGGAAGGGGTGCTGCTTAGGGCTCATTGTTGGGGACATGACCGGGTTCAGCGGCTAGAACATCTGCCCCACAGCAGCCTCCTCCTCCACCGAAGAGGGTAGTTGTCTCCCTGAAGCAGTCACAGCAGGCGTCTCTGCCGCTCCGTCACCACAGTGGGGTTTTGTTCAGGCAGATCGCGCTGGGGTTCTGCACCTGCAGAAGGAGAGGGGTCTGTTGTCGCTGGCTTTCCCCCAAGCAGGCTCTTGCACACTCTAGAAAAAACACCTTGTAAGTCTGTGCATTTTTATTGTCTTGATAAATTGTATTTTTTTCTAATGGGGATTGGGAGATGGACTTCGTTTTTAAAAATATGTGGATTTTGGTTACCAAGTTTAGTGTTAATATATTCCATATACATACAAAACTACCCGGTATGTCTGGCTTTTCCCTTCTGTCAGGTAATAGCTAAAGTCAGCATGATTGCTCCCTGTACCACCCCAAATAAGTGAGTGCCTCACCTTGTGGGGCCTGAGCAGCTACCTTGAGACCATGTGAGGTGGCACCTTTCCGGGGTGGACTCGTGCGGCCTTGAGGACAGGCACAGGGCACCCTATCCCAAGCCGTCCAGGCAGGAGGAAGGCAGCCAAGGCAACTGGGTTCTGGGAGCCCTGGGTGGGGCAGCTGTGGGGAGGAACTGGGTTCGGGGAGCCCTGGGCGGGGCGGCTGTTGGGGGGAACTGGGTTCGGGGTGCCCTGGGCAGGGGGCTACTGGGGGGCGGCTGTGAGGAGGAGTTGGGTTCAGGGAGCCCTGGGCGGGGTGGCTGTCAGGGGGAACTGGGTTCCGGGAGCCCTGGGCCGGGGCAGGGGGCGGCTGTAGGAAGGAACTGGTTTCGGGGAGCCCTGGGCGGGGCGGCTGTGGGGAGGAAGGTGACGTGCAGGGGACCAGAGGCTCTGCACTGCTCCTAGGACAGCTCATCTGTAATCAGAAAAAAAATAAACAAAATACAGAACGCTGACTCCTCCGTGAGACAGATCGGGGACCTTAGCACTTTAATCCCTCCCTTCTGAGCGCTCGGTGTGCACTTTTAGACTATAGCTGTTTCATTGACGTGTCACTCTCCATCCAGTGTCCTTGATGTGGCTTTTAGAGACTTAGCAGAAAATTCGACACAAGCAGGAACTTGATTTTTTAAGAAAAAATATTACATTTTGAGGACATTTTGACAAGTAGGGGAAGAGAGGGCTTCTGTTGTTTTGTTTTGTTTTGTTTTGTTAACTAAACCTGAAGTATTAATTCCACAAAGACACTGTCCCTCAGGACCACTCAGGTACAGCTCTGCCAGGGACAGAGTCCTGCTAGTGGGAGGTCTCAGGTGGGGCGGTGTGTTCTGTGCCATGAGGCAGCGACAGGTCCAGATGGATGTCGTCACCACCTTCCTCAGCTCTCATCACCTGGTCGTACGCCAGGCCCACCTCTTCCCAGCAAGGGACGCCAAAGAACTGCAGTTTTTATTCTGAGTCTTAATTTAACTTTTCATCATCTTTTCCTATTTTGGAGAATTTTTTGTAATTAAAAGCAATTATTTTAAAATGTGCAAGCCAGTATCTCACAAGGCATGGATTTCTGTGGAATTTATTTTTATTCAAATAACCATATTTATCTCCAGGCTGTGGAATCGCCACTTTCTTTGTGAAGACAGTGTCTCTCCTTGTAATCTCACACAGGTACACTGAGGAGGGGACGGCTCCGTCTTCACATTGTGCACAGATCTGAGGATGGGATTAGCGAAGCTGTGGAGACTGCACATCCGGACCTGCCCATGTCTCAAAACAAACACATGTACAGTGGCTCTTTTTCCTTCTCAAACACTTTACCCCAGAAGCAGGTGGTCTGCCCCAGGCATAAAGAAGGAAAATTGGCCATCTTTCCCACCTCTAAATTCTGTAAAATTATAGACTTGCTCAAAAGATTCCTTTTTATCATCCCCACGCTGTGTAAGTGGAAAGGGCATTGTGTTCCGTGTGTGTCCAGTTTACAGCGTCTCTGCCCCCTAGCGTGTTTTGTGACAATCTCCCTGGGTGAGGAGTGGGTGCACCCAGCCCCGAGGCCAGTGGTTGCTCGGGGCCTTCCGTGTGAGTTCTAGTGTTCACTTGATGCCGGGGAATAGAATTAGAGAAAACTCTGACCTGCCGGGTTCCAGGGACTGGTGGAGGTGGATGGCAGGTCCGACTCGACCATGACTTAGTTGTAAGGGTGTGTCGGCTTTTTCAGTCTCATGTGAAAATCCTCCTGTCTCTGGCAGCACTGTCTGCACTTTCTTGTTTACTGTTTGAAGGGACGAGTACCAAGCCACAAGAACACTTCTTTTGGCCACAGCATAAGCTGATGGTATGTAAGGAACCGATGGGCCATTAAACATGAACTGAACGGTTAAAAGCACAGTCTATGGAACGCTAATGGAGTCAGCCCCTAAAGCTGTTTGCTTTTTCAGGCTTTGGATTACATGCTTTTAATTTGATTTTAGAATCTGGACACTTTCTATGAATGTAATTCGGCTGAGAAACATGTTGCTGAGATGCAATCCTCAGTGTTCTCTGTATGTAAATCTGTGTATACACCACACGTTACAACTGCATGAGCTTCCTCTCGCACAAGACCAGCTGGAACTGAGCATGAGACGCTGTCAAATACAGACAAAGGATTTGAGATGTTCTCAATAAAAAGAAAATGTTTCACTACTCAAAAAAAAAAAAAAAAA", "TTCGGGGAGCCCTGGGCGGGGCGGCTGT", 3))

#nStr = "AATGGGACACATGCGCTGGGAGCCTGGTAATAAGCTGATTGAACTACAGATGACCCGCAAATGGAGACCTTTAGGAAAGAGTATCAAGGAAGTTAGGCGACACACGTACGAAGTGCGCCCAGATCTGACTTAAGAAACGTCGGGGTCATTTGGATACTAAGTCAAGCGAGAGCACGACACCCGCATTCGACCAGTGACCGAATGGGACACATGCGCTGGGAGCCTGCGACGTTCGCCGGCGGTAACGGCTTAACGGGGCTTGTTGCTGCTAGTCGGCGATATAGGTCTTCAGTAAAGCCATCTACTGGCCGCTTTTGAATGGTACCGAAGAGCAAAGCAAGTTCATTTGATTATTCTACTGTGGCGATTTCTATTCGTCGTGTTATAACATTGATTGCTCGCGATCGGGCCCGTTAGGCTTACTTCTGCGGAACGTGTTCTCGAAGGGATAGGTGCGAGGTGCGGGGCATGGAATTTTAGTCCTCCCTCTCCAAGCTGGCCGCTCTTCATGTTGTCATTTTTAGAATTTGGGTTGAGGTCCCCGCATAACAAACACTTTGGGACACATGCGCTGGGAGCCTCCAAAGGCAGTAGGCTTGGGGCACATGGGACACATGCGCTGGGAGCCTACAGGAACCGCTCTCACACGGTCCCGAAATTTGCCCGTGTGACCAACAACATCCTTTTATTTGTCGGCTGAAGTCATTGGTAGCGTGTTCACCCTTACGTGCGTAACCCCAGCGCGAATCTTCACCCCTAATAGTGCCGAGTACAGCTGGGTACCCGCTGCCAGATGAATGTACTAAGTCGGAAGGCATCTGTTTATCTGAGGAGCATTGCCTGCGGGCATAAAAATGGGACACATGCGCTGGGAGCCTCTGTTAGTTGCGAACTACGGACATGGTCCGACACTAGAAAGATTTGTATGGAAGCGGATCGAAGCCCCTGCTTCGACTGTACACCCCATGTCCCGTTCTGAACGATGGGACACATGCGCTGGGAGCCTCCGGGCAATTATGACCACAACTTCGGAGGGTTGTAGATCGGATTATTGCGTATCGTCGCAGTTTTTCCACACGGACTATCGTCGTCTAAACTAACCGGGGGGGCTCAGGTGGGACACATGCGCTGGGAGCCTCTG"
#for substring in chunkstring("AATGGGACACATGCGCTGGGAGCCTGGTAATAAGCTGATTGAACTACAGATGACCCGCAAATGGAGACCTTTAGGAAAGAGTATCAAGGAAGTTAGGCGACACACGTACGAAGTGCGCCCAGATCTGACTTAAGAAACGTCGGGGTCATTTGGATACTAAGTCAAGCGAGAGCACGACACCCGCATTCGACCAGTGACCGAATGGGACACATGCGCTGGGAGCCTGCGACGTTCGCCGGCGGTAACGGCTTAACGGGGCTTGTTGCTGCTAGTCGGCGATATAGGTCTTCAGTAAAGCCATCTACTGGCCGCTTTTGAATGGTACCGAAGAGCAAAGCAAGTTCATTTGATTATTCTACTGTGGCGATTTCTATTCGTCGTGTTATAACATTGATTGCTCGCGATCGGGCCCGTTAGGCTTACTTCTGCGGAACGTGTTCTCGAAGGGATAGGTGCGAGGTGCGGGGCATGGAATTTTAGTCCTCCCTCTCCAAGCTGGCCGCTCTTCATGTTGTCATTTTTAGAATTTGGGTTGAGGTCCCCGCATAACAAACACTTTGGGACACATGCGCTGGGAGCCTCCAAAGGCAGTAGGCTTGGGGCACATGGGACACATGCGCTGGGAGCCTACAGGAACCGCTCTCACACGGTCCCGAAATTTGCCCGTGTGACCAACAACATCCTTTTATTTGTCGGCTGAAGTCATTGGTAGCGTGTTCACCCTTACGTGCGTAACCCCAGCGCGAATCTTCACCCCTAATAGTGCCGAGTACAGCTGGGTACCCGCTGCCAGATGAATGTACTAAGTCGGAAGGCATCTGTTTATCTGAGGAGCATTGCCTGCGGGCATAAAAATGGGACACATGCGCTGGGAGCCTCTGTTAGTTGCGAACTACGGACATGGTCCGACACTAGAAAGATTTGTATGGAAGCGGATCGAAGCCCCTGCTTCGACTGTACACCCCATGTCCCGTTCTGAACGATGGGACACATGCGCTGGGAGCCTCCGGGCAATTATGACCACAACTTCGGAGGGTTGTAGATCGGATTATTGCGTATCGTCGCAGTTTTTCCACACGGACTATCGTCGTCTAAACTAACCGGGGGGGCTCAGGTGGGACACATGCGCTGGGAGCCTCTG", 23):
#    if nStr.count(substring) == 3:
#        print(substring)
#
#print(occurrences("AATGGGACACATGCGCTGGGAGCCTGGTAATAAGCTGATTGAACTACAGATGACCCGCAAATGGAGACCTTTAGGAAAGAGTATCAAGGAAGTTAGGCGACACACGTACGAAGTGCGCCCAGATCTGACTTAAGAAACGTCGGGGTCATTTGGATACTAAGTCAAGCGAGAGCACGACACCCGCATTCGACCAGTGACCGAATGGGACACATGCGCTGGGAGCCTGCGACGTTCGCCGGCGGTAACGGCTTAACGGGGCTTGTTGCTGCTAGTCGGCGATATAGGTCTTCAGTAAAGCCATCTACTGGCCGCTTTTGAATGGTACCGAAGAGCAAAGCAAGTTCATTTGATTATTCTACTGTGGCGATTTCTATTCGTCGTGTTATAACATTGATTGCTCGCGATCGGGCCCGTTAGGCTTACTTCTGCGGAACGTGTTCTCGAAGGGATAGGTGCGAGGTGCGGGGCATGGAATTTTAGTCCTCCCTCTCCAAGCTGGCCGCTCTTCATGTTGTCATTTTTAGAATTTGGGTTGAGGTCCCCGCATAACAAACACTTTGGGACACATGCGCTGGGAGCCTCCAAAGGCAGTAGGCTTGGGGCACATGGGACACATGCGCTGGGAGCCTACAGGAACCGCTCTCACACGGTCCCGAAATTTGCCCGTGTGACCAACAACATCCTTTTATTTGTCGGCTGAAGTCATTGGTAGCGTGTTCACCCTTACGTGCGTAACCCCAGCGCGAATCTTCACCCCTAATAGTGCCGAGTACAGCTGGGTACCCGCTGCCAGATGAATGTACTAAGTCGGAAGGCATCTGTTTATCTGAGGAGCATTGCCTGCGGGCATAAAAATGGGACACATGCGCTGGGAGCCTCTGTTAGTTGCGAACTACGGACATGGTCCGACACTAGAAAGATTTGTATGGAAGCGGATCGAAGCCCCTGCTTCGACTGTACACCCCATGTCCCGTTCTGAACGATGGGACACATGCGCTGGGAGCCTCCGGGCAATTATGACCACAACTTCGGAGGGTTGTAGATCGGATTATTGCGTATCGTCGCAGTTTTTCCACACGGACTATCGTCGTCTAAACTAACCGGGGGGGCTCAGGTGGGACACATGCGCTGGGAGCCTCTG", "AATGGGACACATGCGCTGGGAGC"))

